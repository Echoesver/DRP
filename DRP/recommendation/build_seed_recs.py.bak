# This does not work and is maintained for reference only

#!/usr/local/bin/python

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
 # # Seed Recommendation Gen 'n Store  Worker Process  # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

#Grab the Django settings if they aren't already set.
import os, sys
full_path = os.path.dirname(os.path.realpath(__file__))+"/"
django_path = full_path[:full_path.rfind("/DRP/")]
if django_path not in sys.path:
  sys.path = [django_path] + sys.path
  os.environ['DJANGO_SETTINGS_MODULE'] = 'DRP.settings'


#An independent worker process for generating and storing seeds in the database.
def seed_rec_worker(lab_id, seed_id, user_id):
  from DRP.models import Data, Lab_Group, User
  from DRP.cacheFunctions import remove_seed_rec_worker_from_cache
  from DRP.database_construction import store_new_Recommendation_list
  from DRP.compoundGuideFunctions import translate_reactants
  from DRP.recommendation.seed_rec import constructRecsFromSeed
  from DRP.recommendation.filter_seed_recs import filterSeedRecList
  from DRP.logPrinting import print_error, print_log
  from DRP.emailFunctions import email_user, email_admins
  import django.db

  max_recs_per_seed = 250 #We don't want to clutter our database too much...
  print_log("Seed Rec: {} {} {}".format(lab_id, seed_id, user_id))

  try:
    #Restart the database connection for this new process.
    django.db.close_connection()

    #Get the objects from the database (assuming validation has already passed).
    seed = Data.objects.get(id=seed_id)
    lab_group = Lab_Group.objects.get(id=lab_id)
    user = User.objects.get(id=user_id)
  except Exception as e:
    print_error("Can't load entries: {} {} {}\n{}".format(lab_id, seed_id, user_id, e))

  try:
    #Actually create new recommendations...
    try:
      recList = constructRecsFromSeed(seed_id)
    except Exception as e:
      raise Exception("constructRecsFromSeed failed: {}".format(e))

    try:
      recList = filterSeedRecList(lab_group, recList)[:max_recs_per_seed]
    except Exception as e:
      raise Exception("filterSeedRecList failed: {}".format(e))

    #Translate any compounds in the recList to abbrevs.
    recList = translate_reactants(lab_group, recList)

    #And store them in the database.
    store_new_Recommendation_list(lab_group, recList, seed_source=seed)

    email_body = "The recommendations based on Reaction \"{}\" have finished!".format(seed.ref)
    email_user(user, "Seed Recommendations Ready", email_body)

  except Exception as e:
    #Log any errors that might have occurred.
    print_error("{} {} {}".format(lab_id, seed_id, user_id), details=e)

    #Email the user that this batch of recommendations failed.
    email_body = "We're very sorry, but the recommendations based on Reaction \"{}\" could not be created! Please let us know so that we can fix this!".format(seed.ref)
    email_user(user, "Seed Recommendations Failed!", email_body)

    #Also email the admins so that they can address the problem.
    email_body = ("Seed Recommendation Failed... (check .../DRP/logs/ for more)\n"+
            "Seed-Rec Worker: {} {} {}\n".format(lab_id, seed_id, user_id)+
            "__________\n"+
            "Error: {}".format(e)+
            "__________\n")
    email_admins("Fatal Failure: Seed Recs Failed!", email_body)

  finally: #In the case that emailing fails, always uncache the process.
    remove_seed_rec_worker_from_cache(lab_group, seed.ref)


if __name__ == "__main__":
  if len(sys.argv) != 4:
    print "You probably want to let the UI handle this..."
    print "python ./this_script.py lab_id seed_data_id user_id"
  else:
    seed_rec_worker(sys.argv[1], sys.argv[2], sys.argv[3])


